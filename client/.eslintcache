[{"/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/index.js":"1","/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/App.js":"2","/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/reportWebVitals.js":"3","/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/pages/products.js":"4","/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/pages/index.js":"5","/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/components/navbar.js":"6","/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/components/savedProducts.js":"7","/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/components/product.js":"8"},{"size":503,"mtime":1609810419984,"results":"9","hashOfConfig":"10"},{"size":1242,"mtime":1609816318432,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1609810419985,"results":"12","hashOfConfig":"10"},{"size":183,"mtime":1609810419985,"results":"13","hashOfConfig":"10"},{"size":1989,"mtime":1609810419985,"results":"14","hashOfConfig":"10"},{"size":1167,"mtime":1609810419983,"results":"15","hashOfConfig":"10"},{"size":1568,"mtime":1609810419983,"results":"16","hashOfConfig":"10"},{"size":4128,"mtime":1609816318433,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"1uvmzyo",{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"21"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"21"},"/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/index.js",["40"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["41","42"],"/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/App.js",["43","44","45"],"import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Index from './pages/index';\nimport Products from './pages/products';\nimport Navbar from './components/navbar';\nimport ProductCard from './components/product';\nimport SavedProducts from './components/savedProducts';\n\nfunction App() {\n  const [theme, setTheme] = useState('light');\n  const [product, setProduct] = useState({\n    itemTitle: \"\",\n    itemUrl: \"\",\n    itemImage: \"\",\n    itemPrice: 0,\n    itemStatus: \"\",\n    itemPriceAlert: 0,\n  })\n\n  function updateProductState(item){\n    setProduct({\n      itemTitle: item.data.title,\n      itemUrl: item.data.url,\n      itemImage: item.data.image,\n      itemPrice: item.data.price,\n      itemStatus: item.data.availability,\n    })\n  }\n\n  return (\n    <Router>\n      <Navbar />\n      <div>\n        <Route exact path=\"/\" render={() => (<Index updateProductState={updateProductState}/>)} />\n        <Route exact path=\"/products\" component={Products} />\n        {product.itemTitle != \"\" && \n          <ProductCard item={product} updateProductState={updateProductState}/>\n        }\n        <SavedProducts />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/reportWebVitals.js",[],"/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/pages/products.js",[],"/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/pages/index.js",[],"/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/components/navbar.js",[],["46","47"],"/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/components/savedProducts.js",["48"],"import React from 'react';\nimport '../App.css';\nimport { Card, Container, Row, Col, Button } from 'react-bootstrap';\nimport Lego from '../assets/images/lego.jpg';\n\nfunction savedProduct() {\n  return (\n    <div>\n      <div className=\"container\">\n        <h1 className=\"product-saved-heading\">All Saved Products</h1>\n\n        <Card>\n          <Card.Header>\n            <strong style={{ color: 'green' }}>In Stock</strong>\n          </Card.Header>\n          <Card.Body>\n            <Row>\n              <Col className=\"md\">\n                <img src={Lego} alt=\"\" className=\"photo-small\" />\n              </Col>\n              <Col className=\"md\">\n                <Card.Title className=\"product-name\">\n                  LEGO Technic Bugatti Chiron 42083 Race Car Building Kit and\n                  Engineering Toy, Adult Collectible Sports Car with Scale Model\n                  Engine (3599 Pieces)\n                </Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted product-price\">\n                  Price: <strong>$349.95</strong>\n                </Card.Subtitle>\n                <Card.Text className=\"product-status\">\n                  <strong style={{ color: 'red' }}>Out of Stock</strong>\n                </Card.Text>\n              </Col>\n              <Col className=\"mb-2 btn-col md\">\n                <Button variant=\"primary\" className=\"view-btn\">\n                  View Product\n                </Button>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default savedProduct;\n","/Users/emilyaguirre/homework/22. project 3/Stockify/client/src/components/product.js",["49","50","51","52","53"],"import React, {useState} from 'react';\nimport '../App.css';\nimport { Card, Container, Row, Col, Button } from 'react-bootstrap';\n// import Lego from '../assets/images/lego.jpg';\n\n\nfunction Product(props) {\n  // Initially stores the searched product in \"state\"\n  // const[product, setProduct] = useState({\n  //   itemTitle: \"\",\n  //   itemUrl: \"\",\n  //   itemImage: \"\",\n  //   itemPrice: 0,\n  //   itemStatus: \"\",\n  //   itemPriceAlert: 0,\n  // })\n\n  // Creating a state that holds which question we are asking\n  const[counter, setCounter] = useState(0);\n  \n  \n  // counter===0 question/button set event listener functions\n  // Question 1 \"Yes\" onclick function\n  const question1Yes = (event) => {\n    event.preventDefault()\n    // *** NEED to write code here to save the product to the saved products list/page\n\n    // changing counter to 1, to present the next question and set of yes and no buttons\n    setCounter(1)\n  };\n\n  // Question 1 \"No\" onclick function\n  const question1No = (event) => {\n    event.preventDefault()\n    // *** NEED to write code that will save the url that was searched, in case the user presses \"Back\" in the 404 option provided to them...\n    // ... if they click this \"No\" button\n\n    // setting the counter to 404 to prompt user to check their url entry and try again, or to return to the product page\n    setCounter(404)\n    };\n    // end counter===0\n\n  \n  // counter===1 question/button set event listener functions\n  // Question 2 \"Yes\" onclick function\n  const question2Yes = (event) => {\n    event.preventDefault()\n    // *** NEED to write code here that will add this to the users list to be notified of\n\n    // changing counter to 2, to present the next question and set of yes and no buttons\n    setCounter(2)\n  };\n  \n  // Question 2 \"No\" onclick function\n  const question2No = (event) => {\n    event.preventDefault()\n    // changing counter to 2, to present the next question and set of yes and no buttons\n    setCounter(2)\n  };\n  // end counter===1\n\n  \n  // counter===2 question/button set event listener functions\n  // Question 3 \"Yes\" onclick function\n  const question3Yes = (event) => {\n    event.preventDefault()\n    // *** NEED to write code here that will add this to the users list to be notified of\n\n    setCounter(777)\n  };\n  \n  // Question 3 \"No\" onclick function\n  const question3No = (event) => {\n    event.preventDefault()\n    // if statement to determine if question 2 answer was yes, then move to counter===777 (email form)\n    if (question2Yes = true) {\n      setCounter(777)\n    }\n    // or if question 2 was no, then move to counter 420 as the user did not select anything to be notified for\n    else if (question2No = true) {\n      setCounter(420)\n    }\n  };\n  // end counter===2\n\n\n  // counter===420 verification question button functions\n  // verificationQuestionYes (I'm Sure) on click function\n  const verificationQuestionYes = (event) => {\n    event.preventDefault()\n    // *** NEED to write code here that prompts the user to try another product...\n    // ... and that clears the search\n    setCounter(0)\n  }\n\n  // verificationQuestionNo (Take Me Back!) on click function\n  const verificationQuestionNo = (event) => {\n    event.preventDefault()\n    // *** Need to write code here that performs the url search again and brings it back to question two (first notification question)\n\n    setCounter(1)\n  }\n\n  \n  // counter===404 statement/button set event listener functions\n  const urlCheckClear = (event) => {\n    event.preventDefault()\n    // Resets the counter back to 0, to allow user to start a new search\n    setCounter(0)\n  };\n\n  const urlCheckReturn = (event) => {\n    event.preventDefault()\n    // *** NEED to write code that performs the search function with that saved url from question1No variable, IF this \"Return\" button is clicked...\n    // ... and sets the counter to (0) after performing that search.\n  };\n  // end counter===404 statement/button set\n\n  // counter===777\n  const emailSubmit = (event) => {\n    event.preventDefault()\n    // *** NEED to write code here that saves the users email (emailEntry) with their product & notification preferences\n    // *** NEED to write code here that uses the user's email (emailEntry) to send a notification to the user (first notification which confirms their product notification requests)\n    // *** NEED to write code here that triggers the web scrapping for the requested notification types for that product, and triggers notification on change\n  }\n\n  \n  return (\n    <div\n    //   style={{\n    //     position: 'absolute',\n    //     left: '50%',\n    //     top: '50%',\n    //     transform: 'translate(-50%, -50%)',\n    //   }}\n    >\n      <Container className=\"product-container md\">\n        <Card className=\"product-card\">\n          <Card.Body>\n            <Card.Title className=\"product-found\">Product Found</Card.Title>\n\n            {/* Counter===0 Question (Question 1) */}\n            {counter===0 ?\n            <Card.Subtitle className=\"mb-2 text-muted product-subtext\">\n              Is this the product you were looking for?\n            </Card.Subtitle>\n            // Ends counter===0 question (Question 1)\n\n            // Counter===1 question (Question 2)\n            : counter===1 ?\n            <Card.Subtitle className=\"mb-2 text-muted product-subtext\">\n              Do you want to be notified of product availability changes?\n            </Card.Subtitle>\n            // Ends counter===1 question (Question 2)\n\n            // Counter===2 question (Question 3)\n            : counter===2 ?          \n            <Card.Subtitle className=\"mb-2 text-muted product-subtext\">\n              Do you want to be notified of price changes?\n            </Card.Subtitle>\n            // Ends counter===2 question (Question 3)\n\n            // Counter===404 statement\n            // Message if the product search does not turn up the product the user is looking for\n            : counter===404 ?\n            <Card.Subtitle className=\"mb-2 test-muted product-subtext\">\n              Please check your Amazon product URL and try again, or find another product to get notifications for\n            </Card.Subtitle>\n            // Ends counter===404 statement\n\n            // Counter===777 prompt\n            // Prompt for user to enter their email address and press submit to receive notifications requested\n            : counter===777 ?\n            <Card.Subtitle className=\"mb-2 test-muted product-subtext\">\n              Enter your email address and press \"Submit\" to receive requested notifications\n            </Card.Subtitle>\n            // Ends counter===777 prompt\n\n            // Counter===420 question\n            : counter===420 ?\n            <Card.Subtitle className=\"mb-2 test-muted product-subtext\">\n              Are you sure you don't want any availability or price change notifications for this product?\n            </Card.Subtitle>\n            // Ends counter===420 question\n\n            : null}\n\n\n            <Container className=\"product-output\">\n              <Row>\n                <Col md>\n                  <img src={props.item.itemImage} alt=\"\" className=\"product-photo\" />\n                </Col>\n                <Col className=\"product-details md\">\n                  {/* this needs to be props and also have a limit on character length */}\n                  <Card.Title className=\"product-name\">\n                    {/* displays the title and allows user to click on a link to the url, opening in a new window*/}\n                    <a href={props.item.itemUrl} target=\"_blank\">{props.item.itemTitle}</a>\n                  </Card.Title>\n                  <Card.Subtitle className=\"mb-2 text-muted product-price\">\n                    Price: <strong>{props.item.itemPrice}</strong>\n                  </Card.Subtitle>\n                  <Card.Text className=\"product-status\">\n                    <strong style={{ color: 'red' }}>{props.item.itemStatus}</strong>\n                  </Card.Text>\n\n                  {/* Counter===0 button set (for Question 1)*/}\n                  {counter===0 ?\n                  <>\n                  <Button onClick={() => question1Yes} variant=\"success\" className=\"product-btn\">\n                    Yes\n                  </Button>\n                  <Button onClick={() => question1No} variant=\"outline-primary\" className=\"product-btn\">\n                    No\n                  </Button>\n                  </>\n                  // Ends counter===0 button set (for Question 1)\n\n                  // Counter===1 button set (for Question 2)\n                  : counter===1 ?\n                  <>\n                  <Button onClick={() => question2Yes} variant=\"success\" className=\"product-btn\">\n                    Yes\n                  </Button>\n                  <Button onClick={() => question2No} variant=\"outline-primary\" className=\"product-btn\">\n                    No\n                  </Button>\n                  </>\n                  // Ends counter===1 button set (for Question 2)\n\n                  // Counter===2 button set (for Question 3)\n                  : counter===2 ?\n                  <>\n                  <Button onClick={() => question3Yes} variant=\"success\" className=\"product-btn\">\n                    Yes\n                  </Button>\n                  <Button onClick={() => question3No} variant=\"outline-primary\" className=\"product-btn\">\n                    No\n                  </Button>\n                  </>\n                  // Ends counter===2 button set (for Question 3)\n\n                  // Counter===404 button set (for a \"No\" on Question 1)\n                  : counter===404 ?\n                  <>\n                  <Button onclick={() => urlCheckClear} variant=\"success\" className=\"product-btn\">\n                    Clear\n                  </Button>\n                  <Button onClick={() => urlCheckReturn} variant=\"success\" className=\"product-btn\">\n                    Return\n                  </Button>\n                  </>\n                  // Ends counter===404 button set\n\n                  // Counter===777 email address text entry and submit button\n                  : counter===777 ?\n                  <>\n                  {/* <input handleFormSubmit={() => emailEntry} type=\"text\"/> *** NEED to add to this to provide text box for user to enter email address */}\n                  <Button onclick={() => emailSubmit} variant=\"success\" className=\"product-btn\">\n                    Submit\n                  </Button>\n                  </>\n                  // Ends counter 777\n\n                  // Counter===420 - verification question, confirming user is sure they don't want to be notified of product availability or price changes\n                  : counter===420 ?\n                  <>\n                  <Button onClick={() => verificationQuestionYes} variant=\"success\" className=\"product-btn\">\n                    I'm Sure\n                  </Button>\n                  <Button onClick={() => verificationQuestionNo} variant=\"success\" className=\"product-btn\">\n                    Take Me Back!\n                  </Button>\n                  </>\n\n                  : null}\n\n                </Col>\n              </Row>\n            </Container>\n          </Card.Body>\n        </Card>\n      </Container>\n    </div>\n  );\n}\n\nexport default Product;\n",{"ruleId":"54","severity":1,"message":"55","line":5,"column":8,"nodeType":"56","messageId":"57","endLine":5,"endColumn":23},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"54","severity":1,"message":"62","line":11,"column":10,"nodeType":"56","messageId":"57","endLine":11,"endColumn":15},{"ruleId":"54","severity":1,"message":"63","line":11,"column":17,"nodeType":"56","messageId":"57","endLine":11,"endColumn":25},{"ruleId":"64","severity":1,"message":"65","line":37,"column":28,"nodeType":"66","messageId":"67","endLine":37,"endColumn":30},{"ruleId":"58","replacedBy":"68"},{"ruleId":"60","replacedBy":"69"},{"ruleId":"54","severity":1,"message":"70","line":3,"column":16,"nodeType":"56","messageId":"57","endLine":3,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":76,"column":9,"nodeType":"56","messageId":"73","endLine":76,"endColumn":21},{"ruleId":"74","severity":1,"message":"75","line":76,"column":9,"nodeType":"76","messageId":"77","endLine":76,"endColumn":28},{"ruleId":"71","severity":1,"message":"78","line":80,"column":14,"nodeType":"56","messageId":"73","endLine":80,"endColumn":25},{"ruleId":"74","severity":1,"message":"75","line":80,"column":14,"nodeType":"76","messageId":"77","endLine":80,"endColumn":32},{"ruleId":"79","severity":1,"message":"80","line":198,"column":50,"nodeType":"81","endLine":198,"endColumn":65},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["82"],"no-negated-in-lhs",["83"],"'theme' is assigned a value but never used.","'setTheme' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["82"],["83"],"'Container' is defined but never used.","no-const-assign","'question2Yes' is constant.","const","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'question2No' is constant.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]