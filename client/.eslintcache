[{"C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\index.js":"1","C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\reportWebVitals.js":"2","C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\App.js":"3","C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\pages\\index.js":"4","C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\pages\\products.js":"5","C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\product.js":"6","C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\navbar.js":"7","C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\savedProducts.js":"8","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\index.js":"9","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\App.js":"10","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\reportWebVitals.js":"11","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\product.js":"12","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\savedProducts.js":"13","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\pages\\products.js":"14","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\pages\\index.js":"15","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\navbar.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":711,"mtime":1608134971982,"results":"20","hashOfConfig":"18"},{"size":1167,"mtime":1608134971988,"results":"21","hashOfConfig":"18"},{"size":194,"mtime":1608134971989,"results":"22","hashOfConfig":"18"},{"size":4129,"mtime":1608595683574,"results":"23","hashOfConfig":"18"},{"size":1212,"mtime":1608134971983,"results":"24","hashOfConfig":"18"},{"size":1591,"mtime":1608134971985,"results":"25","hashOfConfig":"18"},{"size":500,"mtime":499162500000,"results":"26","hashOfConfig":"27"},{"size":711,"mtime":1608134971982,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":11513,"mtime":1609174015856,"results":"30","hashOfConfig":"27"},{"size":1591,"mtime":1608134971985,"results":"31","hashOfConfig":"27"},{"size":194,"mtime":1608134971989,"results":"32","hashOfConfig":"27"},{"size":1816,"mtime":1609173680183,"results":"33","hashOfConfig":"27"},{"size":1212,"mtime":1608134971983,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"336jvj",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"fs9mdo",{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\index.js",[],["72","73"],"C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\reportWebVitals.js",[],"C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\App.js",["74","75"],"import React, { useState } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Index from './pages/index';\r\nimport Products from './pages/products';\r\nimport Navbar from './components/navbar';\r\nimport ProductCard from './components/product';\r\nimport SavedProducts from './components/savedProducts';\r\n\r\nfunction App() {\r\n  const [theme, setTheme] = useState('light');\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <div>\r\n        <Route exact path=\"/\" component={Index} />\r\n        <Route exact path=\"/products\" component={Products} />\r\n        <ProductCard />\r\n        <SavedProducts />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\pages\\index.js",[],"C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\pages\\products.js",[],"C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\product.js",["76","77","78"],"C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\navbar.js",[],"C:\\Users\\atx76\\OneDrive\\Desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\savedProducts.js",["79"],"import React from 'react';\r\nimport '../App.css';\r\nimport { Card, Container, Row, Col, Button } from 'react-bootstrap';\r\nimport Lego from '../assets/images/lego.jpg';\r\n\r\nfunction savedProduct() {\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h1 className=\"product-saved-heading\">All Saved Products</h1>\r\n\r\n        <Card>\r\n          <Card.Header>\r\n            <strong style={{ color: 'green' }}>In Stock</strong>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              <Col md>\r\n                <img src={Lego} alt=\"\" className=\"photo-small\" />\r\n              </Col>\r\n              <Col md>\r\n                <Card.Title className=\"product-name\">\r\n                  LEGO Technic Bugatti Chiron 42083 Race Car Building Kit and\r\n                  Engineering Toy, Adult Collectible Sports Car with Scale Model\r\n                  Engine (3599 Pieces)\r\n                </Card.Title>\r\n                <Card.Subtitle className=\"mb-2 text-muted product-price\">\r\n                  Price: <strong>$349.95</strong>\r\n                </Card.Subtitle>\r\n                <Card.Text className=\"product-status\">\r\n                  <strong style={{ color: 'red' }}>Out of Stock</strong>\r\n                </Card.Text>\r\n              </Col>\r\n              <Col md-2 className=\"btn-col\" md>\r\n                <Button variant=\"primary\" className=\"view-btn\">\r\n                  View Product\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default savedProduct;\r\n","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\index.js",[],["80","81"],"C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\App.js",["82","83"],"C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\reportWebVitals.js",[],"C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\product.js",["84","85","86","87","88","89"],"import React, {useState} from 'react';\r\nimport '../App.css';\r\nimport { Card, Container, Row, Col, Button } from 'react-bootstrap';\r\n// import Lego from '../assets/images/lego.jpg';\r\n\r\n\r\nfunction Product(props) {\r\n  // Initially stores the searched product in \"state\"\r\n  const[product, setProduct] = useState({\r\n    itemTitle: \"\",\r\n    itemUrl: \"\",\r\n    itemImage: \"\",\r\n    itemPrice: 0,\r\n    itemStatus: \"\",\r\n    itemPriceAlert: 0,\r\n  })\r\n\r\n  // Creating a state that holds which question we are asking\r\n  const[counter, setCounter] = useState(0);\r\n  \r\n  \r\n  // counter===0 question/button set event listener functions\r\n  // Question 1 \"Yes\" onclick function\r\n  const question1Yes = (event) => {\r\n    event.preventDefault()\r\n    // *** NEED to write code here to save the product to the saved products list/page\r\n\r\n    // changing counter to 1, to present the next question and set of yes and no buttons\r\n    setCounter(1)\r\n  };\r\n\r\n  // Question 1 \"No\" onclick function\r\n  const question1No = (event) => {\r\n    event.preventDefault()\r\n    // *** NEED to write code that will save the url that was searched, in case the user presses \"Back\" in the 404 option provided to them...\r\n    // ... if they click this \"No\" button\r\n\r\n    // setting the counter to 404 to prompt user to check their url entry and try again, or to return to the product page\r\n    setCounter(404)\r\n    };\r\n    // end counter===0\r\n\r\n  \r\n  // counter===1 question/button set event listener functions\r\n  // Question 2 \"Yes\" onclick function\r\n  const question2Yes = (event) => {\r\n    event.preventDefault()\r\n    // *** NEED to write code here that will add this to the users list to be notified of\r\n\r\n    // changing counter to 2, to present the next question and set of yes and no buttons\r\n    setCounter(2)\r\n  };\r\n  \r\n  // Question 2 \"No\" onclick function\r\n  const question2No = (event) => {\r\n    event.preventDefault()\r\n    // changing counter to 2, to present the next question and set of yes and no buttons\r\n    setCounter(2)\r\n  };\r\n  // end counter===1\r\n\r\n  \r\n  // counter===2 question/button set event listener functions\r\n  // Question 3 \"Yes\" onclick function\r\n  const question3Yes = (event) => {\r\n    event.preventDefault()\r\n    // *** NEED to write code here that will add this to the users list to be notified of\r\n\r\n    setCounter(777)\r\n  };\r\n  \r\n  // Question 3 \"No\" onclick function\r\n  const question3No = (event) => {\r\n    event.preventDefault()\r\n    // if statement to determine if question 2 answer was yes, then move to counter===777 (email form)\r\n    if (question2Yes = true) {\r\n      setCounter(777)\r\n    }\r\n    // or if question 2 was no, then move to counter 420 as the user did not select anything to be notified for\r\n    else if (question2No = true) {\r\n      setCounter(420)\r\n    }\r\n  };\r\n  // end counter===2\r\n\r\n\r\n  // counter===420 verification question button functions\r\n  // verificationQuestionYes (I'm Sure) on click function\r\n  const verificationQuestionYes = (event) => {\r\n    event.preventDefault()\r\n    // *** NEED to write code here that prompts the user to try another product...\r\n    // ... and that clears the search\r\n    setCounter(0)\r\n  }\r\n\r\n  // verificationQuestionNo (Take Me Back!) on click function\r\n  const verificationQuestionNo = (event) => {\r\n    event.preventDefault()\r\n    // *** Need to write code here that performs the url search again and brings it back to question two (first notification question)\r\n\r\n    setCounter(1)\r\n  }\r\n\r\n  \r\n  // counter===404 statement/button set event listener functions\r\n  const urlCheckClear = (event) => {\r\n    event.preventDefault()\r\n    // Resets the counter back to 0, to allow user to start a new search\r\n    setCounter(0)\r\n  };\r\n\r\n  const urlCheckReturn = (event) => {\r\n    event.preventDefault()\r\n    // *** NEED to write code that performs the search function with that saved url from question1No variable, IF this \"Return\" button is clicked...\r\n    // ... and sets the counter to (0) after performing that search.\r\n  };\r\n  // end counter===404 statement/button set\r\n\r\n  // counter===777\r\n  const emailSubmit = (event) => {\r\n    event.preventDefault()\r\n    // *** NEED to write code here that saves the users email (emailEntry) with their product & notification preferences\r\n    // *** NEED to write code here that uses the user's email (emailEntry) to send a notification to the user (first notification which confirms their product notification requests)\r\n    // *** NEED to write code here that triggers the web scrapping for the requested notification types for that product, and triggers notification on change\r\n  }\r\n\r\n  \r\n  return (\r\n    <div\r\n    //   style={{\r\n    //     position: 'absolute',\r\n    //     left: '50%',\r\n    //     top: '50%',\r\n    //     transform: 'translate(-50%, -50%)',\r\n    //   }}\r\n    >\r\n      <Container className=\"product-container md\">\r\n        <Card className=\"product-card\">\r\n          <Card.Body>\r\n            <Card.Title className=\"product-found\">Product Found</Card.Title>\r\n\r\n            {/* Counter===0 Question (Question 1) */}\r\n            {counter===0 ?\r\n            <Card.Subtitle className=\"mb-2 text-muted product-subtext\">\r\n              Is this the product you were looking for?\r\n            </Card.Subtitle>\r\n            // Ends counter===0 question (Question 1)\r\n\r\n            // Counter===1 question (Question 2)\r\n            : counter===1 ?\r\n            <Card.Subtitle className=\"mb-2 text-muted product-subtext\">\r\n              Do you want to be notified of product availability changes?\r\n            </Card.Subtitle>\r\n            // Ends counter===1 question (Question 2)\r\n\r\n            // Counter===2 question (Question 3)\r\n            : counter===2 ?          \r\n            <Card.Subtitle className=\"mb-2 text-muted product-subtext\">\r\n              Do you want to be notified of price changes?\r\n            </Card.Subtitle>\r\n            // Ends counter===2 question (Question 3)\r\n\r\n            // Counter===404 statement\r\n            // Message if the product search does not turn up the product the user is looking for\r\n            : counter===404 ?\r\n            <Card.Subtitle className=\"mb-2 test-muted product-subtext\">\r\n              Please check your Amazon product URL and try again, or find another product to get notifications for\r\n            </Card.Subtitle>\r\n            // Ends counter===404 statement\r\n\r\n            // Counter===777 prompt\r\n            // Prompt for user to enter their email address and press submit to receive notifications requested\r\n            : counter===777 ?\r\n            <Card.Subtitle className=\"mb-2 test-muted product-subtext\">\r\n              Enter your email address and press \"Submit\" to receive requested notifications\r\n            </Card.Subtitle>\r\n            // Ends counter===777 prompt\r\n\r\n            // Counter===420 question\r\n            : counter===420 ?\r\n            <Card.Subtitle className=\"mb-2 test-muted product-subtext\">\r\n              Are you sure you don't want any availability or price change notifications for this product?\r\n            </Card.Subtitle>\r\n            // Ends counter===420 question\r\n\r\n            : null}\r\n\r\n\r\n            <Container className=\"product-output\">\r\n              <Row>\r\n                <Col md>\r\n                  <img src={product.itemImage} alt=\"\" className=\"product-photo\" />\r\n                </Col>\r\n                <Col classname=\"product-details\" md>\r\n                  {/* this needs to be props and also have a limit on character length */}\r\n                  <Card.Title className=\"product-name\">\r\n                    {/* displays the title and allows user to click on a link to the url, opening in a new window*/}\r\n                    <a href={product.itemUrl} target=\"_blank\">{product.itemTitle}</a>\r\n                  </Card.Title>\r\n                  <Card.Subtitle className=\"mb-2 text-muted product-price\">\r\n                    Price: <strong>{product.itemPrice}</strong>\r\n                  </Card.Subtitle>\r\n                  <Card.Text className=\"product-status\">\r\n                    <strong style={{ color: 'red' }}>{product.itemStatus}</strong>\r\n                  </Card.Text>\r\n\r\n                  {/* Counter===0 button set (for Question 1)*/}\r\n                  {counter===0 ?\r\n                  <>\r\n                  <Button onClick={() => question1Yes} variant=\"success\" className=\"product-btn\">\r\n                    Yes\r\n                  </Button>\r\n                  <Button onClick={() => question1No} variant=\"outline-primary\" className=\"product-btn\">\r\n                    No\r\n                  </Button>\r\n                  </>\r\n                  // Ends counter===0 button set (for Question 1)\r\n\r\n                  // Counter===1 button set (for Question 2)\r\n                  : counter===1 ?\r\n                  <>\r\n                  <Button onClick={() => question2Yes} variant=\"success\" className=\"product-btn\">\r\n                    Yes\r\n                  </Button>\r\n                  <Button onClick={() => question2No} variant=\"outline-primary\" className=\"product-btn\">\r\n                    No\r\n                  </Button>\r\n                  </>\r\n                  // Ends counter===1 button set (for Question 2)\r\n\r\n                  // Counter===2 button set (for Question 3)\r\n                  : counter===2 ?\r\n                  <>\r\n                  <Button onClick={() => question3Yes} variant=\"success\" className=\"product-btn\">\r\n                    Yes\r\n                  </Button>\r\n                  <Button onClick={() => question3No} variant=\"outline-primary\" className=\"product-btn\">\r\n                    No\r\n                  </Button>\r\n                  </>\r\n                  // Ends counter===2 button set (for Question 3)\r\n\r\n                  // Counter===404 button set (for a \"No\" on Question 1)\r\n                  : counter===404 ?\r\n                  <>\r\n                  <Button onclick={() => urlCheckClear} variant=\"success\" className=\"product-btn\">\r\n                    Clear\r\n                  </Button>\r\n                  <Button onClick={() => urlCheckReturn} variant=\"success\" className=\"product-btn\">\r\n                    Return\r\n                  </Button>\r\n                  </>\r\n                  // Ends counter===404 button set\r\n\r\n                  // Counter===777 email address text entry and submit button\r\n                  : counter===777 ?\r\n                  <>\r\n                  {/* <input handleFormSubmit={() => emailEntry} type=\"text\"/> *** NEED to add to this to provide text box for user to enter email address */}\r\n                  <Button onclick={() => emailSubmit} variant=\"success\" className=\"product-btn\">\r\n                    Submit\r\n                  </Button>\r\n                  </>\r\n                  // Ends counter 777\r\n\r\n                  // Counter===420 - verification question, confirming user is sure they don't want to be notified of product availability or price changes\r\n                  : counter===420 ?\r\n                  <>\r\n                  <Button onClick={() => verificationQuestionYes} variant=\"success\" className=\"product-btn\">\r\n                    I'm Sure\r\n                  </Button>\r\n                  <Button onClick={() => verificationQuestionNo} variant=\"success\" className=\"product-btn\">\r\n                    Take Me Back!\r\n                  </Button>\r\n                  </>\r\n\r\n                  : null}\r\n\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </Card.Body>\r\n        </Card>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Product;\r\n","C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\savedProducts.js",["90"],"C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\pages\\products.js",[],"C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\pages\\index.js",[],"C:\\Users\\atx76\\OneDrive\\desktop\\Projects\\Stockify-Project\\Stockify\\client\\src\\components\\navbar.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":11,"column":10,"nodeType":"97","messageId":"98","endLine":11,"endColumn":15},{"ruleId":"95","severity":1,"message":"99","line":11,"column":17,"nodeType":"97","messageId":"98","endLine":11,"endColumn":25},{"ruleId":"95","severity":1,"message":"100","line":8,"column":18,"nodeType":"97","messageId":"98","endLine":8,"endColumn":28},{"ruleId":"101","severity":2,"message":"102","line":8,"column":32,"nodeType":"97","endLine":8,"endColumn":40},{"ruleId":"103","severity":2,"message":"104","line":8,"column":32,"nodeType":"97","messageId":"105","endLine":8,"endColumn":40},{"ruleId":"95","severity":1,"message":"106","line":3,"column":16,"nodeType":"97","messageId":"98","endLine":3,"endColumn":25},{"ruleId":"91","replacedBy":"107"},{"ruleId":"93","replacedBy":"108"},{"ruleId":"95","severity":1,"message":"96","line":11,"column":10,"nodeType":"97","messageId":"98","endLine":11,"endColumn":15},{"ruleId":"95","severity":1,"message":"99","line":11,"column":17,"nodeType":"97","messageId":"98","endLine":11,"endColumn":25},{"ruleId":"95","severity":1,"message":"109","line":9,"column":18,"nodeType":"97","messageId":"98","endLine":9,"endColumn":28},{"ruleId":"110","severity":1,"message":"111","line":76,"column":9,"nodeType":"97","messageId":"112","endLine":76,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":76,"column":9,"nodeType":"115","messageId":"116","endLine":76,"endColumn":28},{"ruleId":"110","severity":1,"message":"117","line":80,"column":14,"nodeType":"97","messageId":"112","endLine":80,"endColumn":25},{"ruleId":"113","severity":1,"message":"114","line":80,"column":14,"nodeType":"115","messageId":"116","endLine":80,"endColumn":32},{"ruleId":"118","severity":1,"message":"119","line":198,"column":47,"nodeType":"120","endLine":198,"endColumn":62},{"ruleId":"95","severity":1,"message":"106","line":3,"column":16,"nodeType":"97","messageId":"98","endLine":3,"endColumn":25},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'theme' is assigned a value but never used.","Identifier","unusedVar","'setTheme' is assigned a value but never used.","'setCounter' is assigned a value but never used.","react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"product\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","no-undef","'useState' is not defined.","undef","'Container' is defined but never used.",["121"],["122"],"'setProduct' is assigned a value but never used.","no-const-assign","'question2Yes' is constant.","const","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'question2No' is constant.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]